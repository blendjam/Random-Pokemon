{"version":3,"sources":["pokedata.js","PokeCard.js","PokeDex.js","PokeGame.js","App.js","serviceWorker.js","index.js"],"names":["pokeData","id","name","type","base_experience","PokeCard","number","poke","this","props","api","slice","className","src","alt","getType","Component","PokeDex","pokeCards","exp","isWinner","map","key","PokeGame","hand1","hand2","length","randIndex","Math","floor","random","randPoke","splice","push","exp1","reduce","acc","cur","exp2","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAAaA,EAAW,CACpB,CAAEC,GAAI,EAAGC,KAAM,aAAcC,KAAM,OAAQC,gBAAiB,IAC5D,CAAEH,GAAI,EAAGC,KAAM,WAAYC,KAAM,QAASC,gBAAiB,IAC3D,CAAEH,GAAI,GAAIC,KAAM,UAAWC,KAAM,MAAOC,gBAAiB,IACzD,CAAEH,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUC,gBAAiB,KAC/D,CAAEH,GAAI,GAAIC,KAAM,UAAWC,KAAM,WAAYC,gBAAiB,KAC9D,CAAEH,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUC,gBAAiB,IAC/D,CAAEH,GAAI,GAAIC,KAAM,SAAUC,KAAM,QAASC,gBAAiB,KAC1D,CAAEH,GAAI,IAAKC,KAAM,QAASC,KAAM,SAAUC,gBAAiB,KCN1CC,E,sKACTF,GACJ,OAAQA,GACJ,IAAK,OACD,MAAO,eAEX,IAAK,QACD,MAAO,eAEX,IAAK,MACD,MAAO,eAEX,IAAK,SACD,MAAO,eAEX,IAAK,WACD,MAAO,SAEX,IAAK,SACD,MAAO,SAEX,IAAK,QACD,MAAO,eAEX,QAAS,U,+BAIb,IAAmBG,EACXC,EAASC,KAAKC,MAAdF,KACFG,EAAG,qEAFUJ,EAEiEC,EAAKN,KAFjD,IAAM,YAAKK,GAASK,OAAO,GAAKL,EAE/D,QACT,OACI,yBAAKM,UAAU,QACX,gCAAML,EAAKL,KAAX,MACA,yBAAKW,IAAKH,EAAKI,IAAKP,EAAKL,OACzB,qCAAWM,KAAKO,QAAQR,EAAKJ,MAA7B,KACA,oCAAUI,EAAKH,gBAAf,U,GApCsBY,aCAjBC,E,uKACP,IAAD,EAC+BT,KAAKC,MAAjCS,EADH,EACGA,UAAWC,EADd,EACcA,IAAKC,EADnB,EACmBA,SACxB,OACI,6BACI,2CAAiBD,EAAjB,KACCC,EAAW,wCAAmB,sCAC/B,yBAAKR,UAAU,WAEPM,EAAUG,KAAI,SAAAd,GACV,OAAO,kBAAC,EAAD,CAAUA,KAAMA,EAAMe,IAAKf,EAAKN,c,GAV9Be,aCChBO,E,uKAKb,IAHA,IAAMC,EAAQ,GACRC,EAAK,YAAOzB,GAEXwB,EAAME,OAASD,EAAMC,QAAQ,CAChC,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,QAC7CK,EAAWN,EAAMO,OAAOL,EAAW,GAAG,GAC5CH,EAAMS,KAAKF,GAGf,IAAMG,EAAOV,EAAMW,QAAO,SAACC,EAAKC,GAC5B,OAAOA,EAAIjC,gBAAkBgC,IAC9B,GAEGE,EAAOb,EAAMU,QAAO,SAACC,EAAKC,GAC5B,OAAOA,EAAIjC,gBAAkBgC,IAC9B,GAGH,OACI,yBAAKxB,UAAU,YACX,kBAAC,EAAD,CAASM,UAAWM,EAAOL,IAAKe,EAAMd,SAAUc,EAAOI,IAEvD,kBAAC,EAAD,CAASpB,UAAWO,EAAON,IAAKmB,EAAMlB,SAAUkB,EAAOJ,S,GAxBjClB,aCCjBuB,E,uKAGb,OACI,yBAAK3B,UAAU,OACX,yBAAKC,IAAI,6EAA6EC,IAAI,iBAC1F,kBAAC,EAAD,W,GANiBE,aCQbwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACEC,SAASC,eAAe,SD2HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d3952223.chunk.js","sourcesContent":["export const pokeData = [\r\n    { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\r\n    { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\r\n    { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\r\n    { id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\r\n    { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\r\n    { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\r\n    { id: 94, name: 'Gengar', type: 'ghost', base_experience: 225 },\r\n    { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\r\n];","import React, { Component } from 'react'\r\n\r\nexport default class PokeCard extends Component {\r\n    getType(type) {\r\n        switch (type) {\r\n            case 'fire':\r\n                return '🔥';\r\n\r\n            case 'water':\r\n                return '💧';\r\n\r\n            case 'bug':\r\n                return '🐛';\r\n\r\n            case 'flying':\r\n                return '💨';\r\n\r\n            case 'electric':\r\n                return '⚡';\r\n\r\n            case 'normal':\r\n                return '⚪';\r\n\r\n            case 'ghost':\r\n                return '👻';\r\n\r\n            default: return;\r\n        }\r\n    }\r\n    render() {\r\n        const padToThree = number => (number <= 999 ? `00${number}`.slice(-3) : number);\r\n        const { poke } = this.props;\r\n        const api = `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${padToThree(poke.id)}.png`;\r\n        return (\r\n            <div className=\"card\">\r\n                <h1> {poke.name}  </h1>\r\n                <img src={api} alt={poke.name} />\r\n                <p> Type: {this.getType(poke.type)} </p>\r\n                <p> EXP: {poke.base_experience} </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PokeCard from './PokeCard';\r\nexport default class PokeDex extends Component {\r\n    render() {\r\n        const { pokeCards, exp, isWinner} = this.props;\r\n        return (\r\n            <div>\r\n                <p> Total EXP : {exp} </p>\r\n                {isWinner ? <h1> Winner </h1>: <p> Loser </p>}\r\n                <div className=\"PokeDex\">\r\n                    {\r\n                        pokeCards.map(poke => {\r\n                            return <PokeCard poke={poke} key={poke.id} />\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { pokeData } from './pokedata';\r\nimport PokeDex from './PokeDex';\r\nexport default class PokeGame extends Component {\r\n    render() {\r\n        const hand1 = [];\r\n        const hand2 = [...pokeData];\r\n\r\n        while (hand1.length < hand2.length) {\r\n            const randIndex = Math.floor(Math.random() * hand2.length);\r\n            const randPoke = hand2.splice(randIndex, 1)[0];\r\n            hand1.push(randPoke);\r\n        }\r\n\r\n        const exp1 = hand1.reduce((acc, cur) => {\r\n            return cur.base_experience + acc\r\n        }, 0)\r\n\r\n        const exp2 = hand2.reduce((acc, cur) => {\r\n            return cur.base_experience + acc\r\n        }, 0)\r\n\r\n\r\n        return (\r\n            <div className=\"PokeGame\">\r\n                <PokeDex pokeCards={hand1} exp={exp1} isWinner={exp1 > exp2 ? true : false} />\r\n\r\n                <PokeDex pokeCards={hand2} exp={exp2} isWinner={exp2 > exp1 ? true : false} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport SearchBox from './SearchBox';\r\nimport PokeGame from './PokeGame';\r\n\r\nexport default class App extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <img src=\"https://fontmeme.com/permalink/200608/1a7a0258bf98cddb1f60e8d364f1047d.png\" alt=\"Pokemon-Logo\" />\r\n                <PokeGame />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />\r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}